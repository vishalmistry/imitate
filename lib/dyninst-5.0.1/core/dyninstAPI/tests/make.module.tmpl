#
# make.module.tmpl for dyninst test suite
# Not intended to be a seperate makefile, but to be used in conjunction with
# higher level, platform-specific makefiles in the build directories

RM = rm -f
RMDIR ?= rmdir
M_GCC ?= gcc
M_GXX ?= g++
DEPCC ?= gcc
DEPENDFLAGS ?= -MM -MT
DEPENDDIR = ./depends
VPATH 	= ../src $(DEPENDDIR)

#######################################################################
###  Generate compiler id strings
###
###  COMPILERT_NATIVE_CC, COMPILERT_NATIVE_CXX must be defined prior to
###  inclusion of this file.  gcc/g++ are handled here as platform-indep
###
#######################################################################

EMPTY:=
BLANK:=$(EMPTY) $(EMPTY)
LPAREN:=(
RPAREN:=)
COMMA=,

COMPILERT_GCC = $(shell $(M_GCC) -v 2>&1 | grep version | head -1)
COMPILER1_GCC = $(subst $(BLANK),_,$(COMPILERT_GCC))
COMPILER2_GCC = $(subst $(LPAREN),_,$(COMPILER1_GCC))
COMPILER_GCC = $(subst $(RPAREN),_,$(COMPILER2_GCC))
MUTATEE_CFLAGS_GNU += -DCOMPILER='"$(COMPILER_GCC)"'

COMPILERT_GXX = $(shell $(M_GCC) -v 2>&1 | grep version | head -1)
COMPILER1_GXX = $(subst $(BLANK),_,$(COMPILERT_GXX))
COMPILER2_GXX = $(subst $(LPAREN),_,$(COMPILER1_GXX))
COMPILER_GXX = $(subst $(RPAREN),_,$(COMPILER2_GXX))
MUTATEE_CXXFLAGS_GNU += -DCOMPILER='"$(COMPILER_GXX)"'

COMPILER1_NATIVE_CC = $(subst $(BLANK),_,$(COMPILERT_NATIVE_CC))
COMPILER2_NATIVE_CC = $(subst $(LPAREN),_,$(COMPILER1_NATIVE_CC))
COMPILER_NATIVE_CC = $(subst $(RPAREN),_,$(COMPILER2_NATIVE_CC))
MUTATEE_CFLAGS_NATIVE += -DCOMPILER='"$(COMPILER_NATIVE_CC)"'

COMPILER1_NATIVE_CXX = $(subst $(BLANK),_,$(COMPILERT_NATIVE_CXX))
COMPILER2_NATIVE_CXX = $(subst $(LPAREN),_,$(COMPILER1_NATIVE_CXX))
COMPILER_NATIVE_CXX = $(subst $(RPAREN),_,$(COMPILER2_NATIVE_CXX))
MUTATEE_CXXFLAGS_NATIVE += -DCOMPILER='"$(COMPILER_NATIVE_CXX)"'

TEST_DEST = $(TO_CORE)/$(PROGRAM_DEST)/testprogs

#######################################################################
###  Basic definitions (filename prefixes)
#######################################################################

MUTATORS = 	test1 \
		test2 \
		test3 \
		test4 \
		test5 \
                test6 \
		test7 \
		test8 \
		test9 \
		test10 \
		test12 \
		test13 \
		test14 \
                test15
      

FORALL_MUTATORS = test_util

MUTATEES_C = 	test1.mutatee \
		test2.mutatee \
		test3.mutatee \
		test4a.mutatee \
		test4b.mutatee \
                test6.mutatee \
		test7.mutatee \
		test8.mutatee \
		test9.mutatee \
		test10.mutatee \
		test12.mutatee \
		test13.mutatee \
		test14.mutatee \
                test15.mutatee 

# MUTATEES_CXX specifies a subset of MUTATEES_C that are also compiled with a C++ compiler
MUTATEES_CXX =	test1.mutatee \
		test2.mutatee \
		test3.mutatee \
		test4a.mutatee \
		test4b.mutatee \
		test7.mutatee \
		test8.mutatee \
		test9.mutatee \
		test12.mutatee \
                test13.mutatee \
                test14.mutatee \
                test15.mutatee

#  Most C mutatees are also compiled as C++ mutatees, there are some (well, one)
#  that are c++ only, which cannot also be compiled as C mutatees

MUTATEES_CXX_ONLY = test5.mutatee

MUTATEES_FORTRAN = test1.mutatee

FORALL_MUTATEES = mutatee_util

TESTLIB_STEMS 	+= libtestA libtestB libInstMe libLoadMe
TESTLIBS = $(addsuffix .so, $(TESTLIB_STEMS))

ifdef M_ABI
TESTLIBS_ABI = $(addsuffix _$(M_ABI).so, $(TESTLIB_STEMS))
endif

#######################################################################
### Generated lists of source files
#######################################################################

# build source names from above prefixes
SRCS_MUTATORS 		+= $(addsuffix .C,$(MUTATORS))
SRCS_FORALL_MUTATORS	+= $(addsuffix .C,$(FORALL_MUTATORS))

SRCS_MUTATEES_C 	+= $(addsuffix .c,$(MUTATEES_C))
SRCS_FORALL_MUTATEES 	+= $(addsuffix .c,$(FORALL_MUTATEES))
SRCS_MUTATEES_CXX 	+= $(addsuffix .c,$(MUTATEES_CXX))
SRCS_MUTATEES_CXX 	+= $(addsuffix .C,$(MUTATEES_CXX_ONLY))

#######################################################################
###  Target file name list generation
#######################################################################

# build object/exec names from above prefixes

MUTATEES_GCC		+= $(addsuffix _gcc,$(MUTATEES_C))
MUTATEES_GXX		+= $(addsuffix _g++,$(MUTATEES_CXX))
MUTATEES_GXX		+= $(addsuffix _g++,$(MUTATEES_CXX_ONLY))

ifdef M_ABI
MUTATEES_GCC_ABI	+= $(addsuffix _gcc_$(M_ABI), $(MUTATEES_C))
MUTATEES_GXX_ABI	+= $(addsuffix _g++_$(M_ABI), $(MUTATEES_CXX))
MUTATEES_GXX_ABI	+= $(addsuffix _g++_$(M_ABI), $(MUTATEES_CXX_ONLY))

# Special Case: NASM does not produce x86_64 object files yet.
MUTATEES_GCC_ABI	:= $(filter-out test6%, $(MUTATEES_GCC_ABI))
endif

ifdef M_G77
MUTATEES_G77		+= $(addsuffix _g77,$(MUTATEES_FORTRAN))
endif

ifdef NATIVE_CC
MUTATEES_NATIVE_CC		+= $(filter-out test10.mutatee_$(NATIVE_CC), $(addsuffix _$(NATIVE_CC),$(MUTATEES_C)))
endif

ifdef NATIVE_CXX
MUTATEES_NATIVE_CXX		+= $(addsuffix _$(NATIVE_CXX),$(MUTATEES_CXX))
MUTATEES_NATIVE_CXX_ONLY	+= $(addsuffix _$(NATIVE_CXX),$(MUTATEES_CXX_ONLY))
endif

ifdef NATIVE_FC
MUTATEES_NATIVE_FC		+= $(addsuffix _$(NATIVE_FC),$(MUTATEES_FORTRAN))
endif

TEST6_AS_OBJ_GNU 		= $(addsuffix .o,$(TEST6_AS_OBJ_BASE))
CALL35_1_OBJ 			= $(CALL35_1_SRC:call%.s=call%.o)

ifdef M_ABI
CALL35_1_OBJ_ABI		= $(CALL35_1_SRC_ABI:call%.s=call%.o)
endif

OBJS_FORALL_MUTATORS		= $(SRCS_FORALL_MUTATORS:%.C=%.o)

#######################################################################
###  A list of all the targets we're building, for install purposes
#######################################################################

ALL_TARGETS			= $(MUTATORS) $(MUTATEES_GCC) $(MUTATEES_GXX)
ALL_TARGETS			+= $(TESTLIBS)
ALL_TARGETS			+= test11
ALL_TARGETS			+= libTest12.so
ifdef M_ABI
ALL_TARGETS			+= $(MUTATEES_GCC_ABI) $(MUTATEES_GXX_ABI)
ALL_TARGETS			+= $(TESTLIBS_ABI)
endif
ifdef M_G77
ALL_TARGETS			+= $(MUTATEES_G77)
endif
ifdef NATIVE_CC
ALL_TARGETS			+= $(MUTATEES_NATIVE_CC)
endif
ifdef NATIVE_CXX
ALL_TARGETS			+= $(MUTATEES_NATIVE_CXX)
ALL_TARGETS			+= $(MUTATEES_NATIVE_CXX_ONLY)
endif
ifdef NATIVE_FC
ALL_TARGETS			+= $(MUTATEES_NATIVE_FC)
endif

ALL_TARGETS_DEST		= $(addprefix $(TEST_DEST)/,$(ALL_TARGETS))

#######################################################################
###  Some pattern rules
#######################################################################

DYNINST_INCDIR = -I../../h 
CXXFLAGS += $(DYNINST_INCDIR)

%_$(NATIVE_CC).o : %.c
	$(NATIVE_CC) -c $< $(CFLAGS_NATIVE) $(MUTATEE_CFLAGS_NATIVE) -o $@
%_$(NATIVE_CXX).o : %.c
	$(NATIVE_CXX) -c $< $(CXXFLAGS_NATIVE) $(MUTATEE_CXXFLAGS_NATIVE) -o $@

%_gcc.o: %.c
	$(M_GCC) -c $< $(CFLAGS) $(MUTATEE_CFLAGS_GNU) -o $@
%_g++.o: %.c 
	$(M_GXX) $(CXXFLAGS) $(MUTATEE_CXXFLAGS_GNU) -c $< -o $@
%_g++.o: %.C 
	$(M_GXX) $(CXXFLAGS) $(MUTATEE_CXXFLAGS_GNU) -c $< -o $@

ifdef M_ABI
%_gcc_$(M_ABI).o: %.c
	$(M_GCC) $(M_ABI_FLAG) -c $< $(CFLAGS) $(MUTATEE_CFLAGS_GNU) -o $@
%_g++_$(M_ABI).o: %.c 
	$(M_GXX) $(M_ABI_FLAG) $(CXXFLAGS) $(MUTATEE_CXXFLAGS_GNU) -c $< -o $@
%_g++_$(M_ABI).o: %.C 
	$(M_GXX) $(M_ABI_FLAG) $(CXXFLAGS) $(MUTATEE_CXXFLAGS_GNU) -c $< -o $@
endif



.C.o:
	$(CXX) -c $< $(CXXFLAGS) $(MUTATOR_CXXFLAGS) -o $@

$(TEST_DEST)/%: %
	-$(CP) $< $(TEST_DEST)

#######################################################################
###  High level targets
#######################################################################

MUTATOR_LDFLAGS += -ldyninstAPI $(MUTATOR_LIBS) 


all: mutators testlibs mutatees 
echo:
	@echo "DEPS TESTLIBS = $(DEPS_TESTLIBS)"
	@echo "MUTATEES_NATIVE_CXX = $(MUTATEES_NATIVE_CXX)"

install: $(TEST_DEST) $(ALL_TARGETS_DEST)
	@echo "install completed"

clean:
	$(RM) *.da *.bb. *.bbg 
	$(RM) $(TESTLIBS) $(TESTLIBS_ABI)
	$(RM) libTest12.so
	$(RM) $(MUTATORS) $(MUTATEES_GCC) $(MUTATEES_GXX) $(MUTATEES_GCC_ABI) $(MUTATEES_GXX_ABI) $(MUTATEES_G77) $(MUTATEES_GXX_ONLY)
	$(RM) *.o $(MUTATEES_NATIVE_CC) $(MUTATEES_NATIVE_CXX) $(MUTATEES_NATIVE_FC) $(MUTATEES_NATIVE_CXX_ONLY)
	$(RM) test11
	$(RM) imagefile
	$(RM) core core.*
	$(RM) .__afs*

distclean: clean
	@if [ -d $(DEPENDDIR) ]; then \
	  $(RM) $(DEPENDDIR)/*.dep; \
          rmdir $(DEPENDDIR); \
         fi

ifdef M_ABI
$(CALL35_1_OBJ_ABI): $(CALL35_1_SRC_ABI)
	$(M_GCC) $(M_ABI_FLAG) -c $< $(CFLAGS) $(MUTATEE_CFLAGS_GNU) -o $@ 
endif

mutators: $(MUTATORS) test11
mutatees: gnu_mutatees native_mutatees
gnu_mutatees: $(MUTATEES_GCC) $(MUTATEES_GXX) $(MUTATEES_G77) $(MUTATEES_GCC_ABI) $(MUTATEES_GXX_ABI)
native_mutatees: $(MUTATEES_NATIVE_CC) $(MUTATEES_NATIVE_CXX) $(MUTATEES_NATIVE_FC) $(MUTATEES_NATIVE_CXX_ONLY)
testlibs: $(TESTLIBS) $(TESTLIBS_ABI) libTest12.so

.PHONY: clean install distclean mutators mutatees testlibs gnu_mutatees native_mutatees


# Despite the look, this isn't actually a pattern rule and so is
# defined _after_ all:
$(CALL35_1_OBJ): $(CALL35_1_SRC)
	$(M_GCC) -c $< $(CFLAGS) $(MUTATEE_CFLAGS_GNU) -o $@ 
$(TEST6_AS_OBJ_GNU): $(TEST6_AS_SRC)
	$(TEST6_AS_GNU) $(TEST6_ASFLAGS_GNU) -o $@ $<


#######################################################################
###  Build command for test libraries
#######################################################################

$(TESTLIBS): %.so : %.c $(DEPENDDIR)/%.dep
ifdef MAKE_SHARED_LIB
	$(CC) -g -c $(CFLAGS) -I$(TO_CORE)/dyninstAPI_RT/h $(CFLAGS_TESTLIBS) $(filter %.c, $^) -o $*.o
	$(MAKE_SHARED_LIB) $(TESTLIB_FLAGS) $*.o -o $@
else
	$(CC) $(TESTLIB_FLAGS) -I$(TO_CORE)/dyninstAPI_RT/h -I../src/ $(filter %.c,$^) -o $@
endif

ifdef M_ABI
$(TESTLIBS_ABI): %_$(M_ABI).so : %.c $(DEPENDDIR)/%.dep
ifdef MAKE_SHARED_LIB
	$(CC) -g -c $(CFLAGS) $(CFLAGS_TESTLIBS) $(filter %.c, $^) -o $*.o
	$(MAKE_SHARED_LIB) $(TESTLIB_FLAGS) $*.o -o $@
else
	$(CC) $(M_ABI_FLAG) $(TESTLIB_FLAGS) -I$(TO_CORE)/dyninstAPI_RT/h -I../src/ $(filter %.c,$^) -o $@
endif
endif

libTest12.so: libTest12.c $(DEPENDDIR)/libTest12.dep
ifdef MAKE_SHARED_LIB
	$(CC) -g -c $(CFLAGS) -I$(TO_CORE)/dyninst_RT/h $(CFLAGS_TESTLIBS) $(filter %.c, $^)  -o libTest12.o
	$(MAKE_SHARED_LIB) $(TESTLIB_FLAGS) $(LIBTEST12_FLAGS) libTest12.o -o $@
else
	$(CC) $(TESTLIB_FLAGS) -I$(TO_CORE)/dyninstAPI_RT/h $(LIBTEST12_FLAGS) $(filter %.c, $^) -o $@
endif
#######################################################################
###  Special Prerequisites for specific Mutatees:
#######################################################################

# Test 1 mutatee depends on two extra files
test1.mutatee_gcc: $(CALL35_1_OBJ) test1.mutateeCommon_gcc.o
test1.mutatee_g++: $(CALL35_1_OBJ) test1.mutateeCommon_g++.o
test1.mutatee_$(NATIVE_CC): $(CALL35_1_SRC) test1.mutateeCommon.c
test1.mutatee_$(NATIVE_CXX): $(CALL35_1_SRC) test1.mutateeCommon.c

ifdef M_ABI
test1.mutatee_gcc_$(M_ABI): $(CALL35_1_OBJ_ABI) test1.mutateeCommon_gcc_m32.o
test1.mutatee_g++_$(M_ABI): $(CALL35_1_OBJ_ABI) test1.mutateeCommon_g++_m32.o
test1.mutatee_$(NATIVE_CC)_$(M_ABI): $(CALL35_1_SRC_ABI) test1.mutateeCommon.c
test1.mutatee_$(NATIVE_CXX)_$(M_ABI): $(CALL35_1_SRC_ABI) test1.mutateeCommon.c
endif

# Test 6 mutatee depends on a platform-specific asm file
test6.mutatee_$(NATIVE_CC): $(TEST6_AS_OBJ_GNU) 
test6.mutatee_$(NATIVE_CXX): $(TEST6_AS_OBJ_GNU) 
test6.mutatee_gcc: $(TEST6_AS_OBJ_GNU) 

# libInstMe.so must be built before test9.mutatee
test9.mutatee_gcc: libInstMe.so
test9.mutatee_$(NATIVE_CC): libInstMe.so

ifdef M_ABI
test9.mutatee_gcc: libInstMe_$(M_ABI).so
test9.mutatee_$(NATIVE_CC): libInstMe_(M_ABI).so
endif

# MUTATEE_SPECIFIC_LIBS is analyzed by gmake when constructing the link line
# If you want to specify that a specific library should be used to link a specific
# mutatee, add an entry to this variable in the format <testno>.-libwhatever
# 
# The <testno>. will be stripped off, leaving -libwhatever on the link line

MUTATEE_SPECIFIC_LIBS_GNU 	+= $(MUTATEE_TEST9_EXTRA_LIB)
MUTATEE_SPECIFIC_LIBS_GNU 	+= 12.-lpthread
MUTATEE_SPECIFIC_LIBS_NATIVE 	+= $(MUTATEE_TEST9_EXTRA_LIB)
MUTATEE_SPECIFIC_LIBS_NATIVE 	+= 12.-lpthread
MUTATEE_SPECIFIC_LIBS_GNU += 13.-lpthread
MUTATEE_SPECIFIC_LIBS_GNU += 14.-lpthread
MUTATEE_SPECIFIC_LIBS_GNU += 15.-lpthread
MUTATEE_SPECIFIC_LIBS_NATIVE 	+= 13.-lpthread
MUTATEE_SPECIFIC_LIBS_NATIVE 	+= 14.-lpthread
MUTATEE_SPECIFIC_LIBS_NATIVE 	+= 15.-lpthread

ifdef MUTATEE_USE_LIBDL_SELECTIVELY
MUTATEE_SPECIFIC_LIBS_GNU 	+= 1.-ldl
MUTATEE_SPECIFIC_LIBS_NATIVE 	+= 1.-ldl
MUTATEE_SPECIFIC_LIBS_GNU 	+= 2.-ldl
MUTATEE_SPECIFIC_LIBS_NATIVE 	+= 2.-ldl
MUTATEE_SPECIFIC_LIBS_GNU 	+= 12.-ldl
MUTATEE_SPECIFIC_LIBS_NATIVE 	+= 12.-ldl

ifdef M_ABI
MUTATEE_SPECIFIC_LIBS_GNU_ABI 	+= 1.-ldl
MUTATEE_SPECIFIC_LIBS_GNU_ABI 	+= 2.-ldl
MUTATEE_SPECIFIC_LIBS_GNU_ABI 	+= 12.-ldl
endif
endif

ifdef M_ABI
MUTATEE_SPECIFIC_LIBS_GNU_ABI 	+= $(MUTATEE_TEST9_EXTRA_LIB_ABI)
MUTATEE_SPECIFIC_LIBS_GNU_ABI	+= 12.-lpthread
MUTATEE_SPECIFIC_LIBS_GNU_ABI += 13.-lpthread
MUTATEE_SPECIFIC_LIBS_GNU_ABI += 14.-lpthread
MUTATEE_SPECIFIC_LIBS_GNU_ABI += 15.-lpthread
endif

#######################################################################
###  Generic mutatee build rules (GNU and NATIVE):
#######################################################################

# GNU Mutatees

$(MUTATEES_GCC): test%.mutatee_gcc : test%.mutatee_gcc.o $(DEPENDDIR)/test%.mutatee_gcc.dep mutatee_util_gcc.o
	$(M_GCC) -o $@ $(filter %.o,$^) $(MUTATEE_LDFLAGS_GNU) $(MUTATEE_LIBS) \
            $(subst $*.,,$(filter $*.%, $(MUTATEE_SPECIFIC_LIBS_GNU)))

$(MUTATEES_GXX): test%.mutatee_g++ : test%.mutatee_g++.o $(DEPENDDIR)/test%.mutatee_g++.dep mutatee_util_g++.o
	$(M_GXX) -o $@ $(filter %.o,$^) $(MUTATEE_LDFLAGS_GNU) $(MUTATEE_LIBS) \
            $(subst $*.,,$(filter $*.%, $(MUTATEE_SPECIFIC_LIBS_GNU)))

# GNU Secondary ABI Mutatees
ifdef M_ABI
$(MUTATEES_GCC_ABI): test%.mutatee_gcc_$(M_ABI) : test%.mutatee_gcc_$(M_ABI).o $(DEPENDDIR)/test%.mutatee_gcc.dep mutatee_util_gcc_$(M_ABI).o
	$(M_GCC) $(M_ABI_FLAG) -o $@ $(filter %.o,$^) $(MUTATEE_LDFLAGS_GNU) $(MUTATEE_LIBS) \
            $(subst $*.,,$(filter $*.%, $(MUTATEE_SPECIFIC_LIBS_GNU_ABI)))

$(MUTATEES_GXX_ABI): test%.mutatee_g++_$(M_ABI) : test%.mutatee_g++_$(M_ABI).o $(DEPENDDIR)/test%.mutatee_g++.dep mutatee_util_g++_$(M_ABI).o
	$(M_GXX) $(M_ABI_FLAG) -o $@ $(filter %.o,$^) $(MUTATEE_LDFLAGS_GNU) $(MUTATEE_LIBS) \
            $(subst $*.,,$(filter $*.%, $(MUTATEE_SPECIFIC_LIBS_GNU_ABI)))
endif


# GNU Fortran (g77) mutatees
# 
# There is no real advantage to generality here since there is only one fortran mutatee
# (ie for test1), thus all constituent files are built explicitly

ifdef M_G77
test1.mutatee_g77.o: ../src/test1.mutateeFort.F
	$(M_G77) -g  $(MUTATEE_G77_FFLAGS) -c -o $@ $^ 
test1.mutateeFortC_g77.o: $(TEST1_FORTRAN_CSOURCE)
	$(M_GCC) $(MUTATEE_G77_CFLAGS) $(filter %.c,$^) -o $@

$(MUTATEES_G77): test%.mutatee_g77 : test%.mutatee_g77.o test1.mutateeFortC_g77.o test1.mutateeCommon_gcc.o mutatee_util_gcc.o $(DEPENDDIR)/test%.mutatee_g77.dep
	$(M_G77) -o $@ $(filter %.o,$^) $(MUTATEE_G77_LDFLAGS) $(MUTATEE_LIBS) 
endif

# Native Mutatees

ifdef NATIVE_CC
$(MUTATEES_NATIVE_CC): test%.mutatee_$(NATIVE_CC) : test%.mutatee.c mutatee_util_$(NATIVE_CC).o
	$(NATIVE_CC) $(MUTATEE_CFLAGS_NATIVE) $(MUTATEE_LDFLAGS_NATIVE) -o $@ $(MUTATEE_LIBS) $(filter %.c  %.s %.S %.o, $^) \
            $(subst $*.,,$(filter $*.%, $(MUTATEE_SPECIFIC_LIBS_NATIVE)))

endif

ifdef NATIVE_CXX
$(MUTATEES_NATIVE_CXX): test%.mutatee_$(NATIVE_CXX) : test%.mutatee.c mutatee_util_$(NATIVE_CXX).o
	$(NATIVE_CXX) $(MUTATEE_CXXFLAGS_NATIVE) -o $@ $(filter %.c %.s %.S %.o,$^) $(MUTATEE_LDFLAGS_NATIVE) $(MUTATEE_LIBS) \
            $(subst $*.,,$(filter $*.%, $(MUTATEE_SPECIFIC_LIBS_NATIVE)))

$(MUTATEES_NATIVE_CXX_ONLY): test%.mutatee_$(NATIVE_CXX) : test%.mutatee.C mutatee_util_$(NATIVE_CXX).o
	$(NATIVE_CXX) $(MUTATEE_CXXFLAGS_NATIVE) -o $@ $(filter %.C %.s %.S %.o,$^) $(MUTATEE_LDFLAGS_NATIVE) $(MUTATEE_LIBS) \
            $(subst $*.,,$(filter $*.%, $(MUTATEE_SPECIFIC_LIBS_NATIVE)))
endif


# Native Fortran mutatees
# 
# There is no real advantage to generality here since there is only one fortran mutatee
# (ie for test1), thus all constituent files are built explicitly

ifdef NATIVE_FC 
test1.mutatee_$(NATIVE_FC).o: ../src/test1.mutateeFort.F
	$(NATIVE_FC) -g  $(MUTATEE_NATIVE_FFLAGS) -c -o $@ $^ 
test1.mutateeFortC_$(NATIVE_FC).o: ../src/test1.mutateeFortC.c
	$(NATIVE_FORTRAN_CC) $(MUTATEE_NATIVE_FC_CFLAGS) -c $(filter %.c,$^) -o $@

$(MUTATEES_NATIVE_FC): test%.mutatee_$(NATIVE_FC) : test%.mutatee_$(NATIVE_FC).o test1.mutateeFortC_$(NATIVE_FC).o test1.mutateeCommon_$(NATIVE_FORTRAN_CC).o mutatee_util_$(NATIVE_FORTRAN_CC).o $(DEPENDDIR)/test%.mutatee_$(NATIVE_FC).dep
	$(NATIVE_FC) -o $@ $(filter %.o,$^) $(MUTATEE_NATIVE_FC_LDFLAGS) $(MUTATEE_LIBS) 
endif

# Install directory
$(TEST_DEST): 
	mkdir $(TEST_DEST)

#######################################################################
###  Generic Mutator build rule:
###
###  resorts to pattern matching test% (matches test1, test2, ... etc)
###  to generate correct, minimal set of prerequisites for each test.
###  It would be nicer to just match something simpler that wasn't 
###  name-dependant, but gnu make is not making this easy.
###
#######################################################################

$(MUTATORS): test% : test%.o $(OBJS_FORALL_MUTATORS) $(DEPENDDIR)/test%.dep
	$(CXX) -o $@ $(filter %.o,$^) $(MUTATOR_LDFLAGS) $(LIBDIR) $(LIBS) $(LDFLAGS) $(MUTATOR_LDFLAGS)

test11:
	cp ../src/test11.sh test11

#######################################################################
###  Depends
#######################################################################

DEPS_MUTATORS 		+= $(addprefix $(DEPENDDIR)/,$(addsuffix .dep,$(MUTATORS)))
DEPS_MUTATORS		+= $(addprefix $(DEPENDDIR)/,$(addsuffix .dep,$(FORALL_MUTATORS)))

DEPS_MUTATEES_GCC	+= $(addprefix $(DEPENDDIR)/,$(addsuffix _gcc.dep, $(MUTATEES_C)))
DEPS_MUTATEES_GXX	+= $(addprefix $(DEPENDDIR)/,$(addsuffix _g++.dep, $(MUTATEES_CXX)))
DEPS_MUTATEES_GXX	+= $(addprefix $(DEPENDDIR)/,$(addsuffix _g++.dep, $(MUTATEES_CXX_ONLY)))
DEPS_TESTLIBS	 	+= $(addprefix $(DEPENDDIR)/,$(addsuffix .dep,$(TESTLIB_STEMS)))
DEPS_TESTLIBS		+= $(DEPENDDIR)/libTest12.dep
ifdef M_G77
DEPS_MUTATEES_G77	+= $(addprefix $(DEPENDDIR)/,$(addsuffix _g77.dep, $(MUTATEES_FORTRAN)))
endif

ifdef NATIVE_FC
DEPS_MUTATEES_NATIVE_FC	+= $(addprefix $(DEPENDDIR)/,$(addsuffix _$(NATIVE_FC).dep, $(MUTATEES_FORTRAN)))
endif

ifdef NATIVE_CC
DEPS_MUTATEES_NATIVE_CC	+= $(addprefix $(DEPENDDIR)/,$(addsuffix _$(NATIVE_CC).dep, $(MUTATEES_C)))
endif

ifdef NATIVE_CXX
DEPS_MUTATEES_NATIVE_CXX += $(addprefix $(DEPENDDIR)/,$(addsuffix _$(NATIVE_CXX).dep, $(MUTATEES_CXX)))
DEPS_MUTATEES_NATIVE_CXX += $(addprefix $(DEPENDDIR)/,$(addsuffix _$(NATIVE_CXX).dep, $(MUTATEES_CXX_ONLY)))
endif


depend: $(DEPS_MUTATORS)

depend_dir:
	@echo "mut deps: $(DEPS_MUTATORS)"
	@if [ -d $(DEPENDDIR) ]; then \
          echo "Directory \"$(DEPENDDIR)\" already exists..."; \
         else \
          mkdir -p $(DEPENDIR); \
          echo "Made \"$(DEPENDDIR)\" directory..."; \
         fi

$(DEPS_MUTATORS): $(DEPENDDIR)/test%.dep : test%.C 
	@mkdir -p $(DEPENDDIR)
	$(DEPCC) $(CXXFLAGS) $< $(MUTATOR_CXXFLAGS) $(DEPENDFLAGS) test$*.o > $@ 

$(DEPS_MUTATEES_GCC): $(DEPENDDIR)/test%.mutatee_gcc.dep : test%.mutatee.c $(SRCS_FORALL_MUTATEES)
	@mkdir -p $(DEPENDDIR)
	$(M_GCC) $(CFLAGS) $< $(MUTATEE_CFLAGS) $(DEPENDFLAGS) test$*.mutatee_gcc.o > $@ 

$(DEPS_MUTATEES_GXX): $(DEPENDDIR)/test%.mutatee_g++.dep : $(wildcard test%.mutatee.*) $(SRCS_FORALL_MUTATEES)
	@mkdir -p $(DEPENDDIR)
	$(M_GXX) $(CXXFLAGS) $< $(MUTATEE_CXXFLAGS) $(DEPENDFLAGS) test$*.mutatee_gxx.o > $@

$(DEPS_MUTATEES_G77): $(DEPENDDIR)/test%.mutatee_g77.dep : test%.mutateeFort.F $(SRCS_FORALL_MUTATEES)
	@mkdir -p $(DEPENDDIR)
	$(M_G77) $(CFLAGS) $< $(MUTATEE_CFLAGS) $(DEPENDFLAGS) test$*.mutateeFort_g77.o > $@


# Use gcc to generate deps for native compilers

ifdef NATIVE_CC
$(DEPS_MUTATEES_NATIVE_CC): $(DEPENDDIR)/test%.mutatee_$(NATIVE_CC).dep : test%.mutatee.c $(SRCS_FORALL_MUTATEES)
	@mkdir -p $(DEPENDDIR)
	$(M_GCC) $(CFLAGS) $< $(MUTATEE_CFLAGS) $(DEPENDFLAGS) test$*.mutatee_$(NATIVE_CC).o > $@
endif

ifdef NATIVE_CXX
$(DEPS_MUTATEES_NATIVE_CXX): $(DEPENDDIR)/test%.mutatee_$(NATIVE_CXX).dep : $(wildcard test%.mutatee.*) $(SRCS_FORALL_MUTATEES)
	@mkdir -p $(DEPENDDIR)
	$(M_GXX) $(CXXFLAGS) $< $(MUTATEE_CXXFLAGS) $(DEPENDFLAGS) test$*.mutatee_$(NATIVE_CXX).o > $@
endif

ifdef NATIVE_FC
$(DEPS_MUTATEES_NATIVE_FC): $(DEPENDDIR)/test%.mutatee_$(NATIVE_FC).dep : test%.mutateeFort.F $(SRCS_FORALL_MUTATEES)
	@mkdir -p $(DEPENDDIR)
	$(M_G77) $(CFLAGS) $< $(MUTATEE_CFLAGS) $(DEPENDFLAGS) test$*.mutateeFort_$(NATIVE_FC).o > $@
endif


$(DEPS_TESTLIBS): $(DEPENDDIR)/lib%.dep : lib%.c 
	@mkdir -p $(DEPENDDIR)
	$(DEPCC) $(CXXFLAGS) -I$(TO_CORE)/dyninstAPI_RT/h $< $(MUTATOR_CXXFLAGS) $(DEPENDFLAGS) lib$*.so > $@

# do not include dep files for "clean" targets
ifneq ($(MAKECMDGOALS),clean)
ifneq ($(MAKECMDGOALS),distclean)
ifneq ($(MAKECMDGOALS),echo)

-include $(DEPS_MUTATORS)
-include $(DEPS_MUTATEES_GCC)
-include $(DEPS_MUTATEES_GXX)
-include $(DEPS_TESTLIBS)

ifdef M_G77
-include $(DEPS_MUTATEES_G77)
endif

ifdef NATIVE_CC
-include $(DEPS_MUTATEES_NATIVE_CC)
endif

ifdef NATIVE_CXX
-include $(DEPS_MUTATEES_NATIVE_CXX)
endif

ifdef NATIVE_FC
-include $(DEPS_MUTATEES_NATIVE_FC)
endif

endif
endif
endif

# Why we normally compile the _tests_ with -fno-implicit-templates, I don't know.
test1.o : test1.C
	$(CXX) -c -o $@ $(CFLAGS) $(DYNINST_INCDIR) $<
